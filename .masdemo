#!/usr/bin/env python3
# ========================================
# Monkey patch: zgodność SPADE 4.0.3 + Slixmpp 1.11.x
# (musi być przed importem SPADE / agentów)
# ========================================
import inspect
import slixmpp.clientxmpp as _cx

if "address" not in inspect.signature(_cx.ClientXMPP.connect).parameters:
    _orig_connect = _cx.ClientXMPP.connect

    def _patched_connect(self, *args, **kwargs):
        if "address" in kwargs and isinstance(kwargs["address"], (tuple, list)):
            host, port = kwargs.pop("address")
            kwargs.setdefault("host", host)
            kwargs.setdefault("port", port)
        return _orig_connect(self, *args, **kwargs)

    _cx.ClientXMPP.connect = _patched_connect
    print("[patch] slixmpp.ClientXMPP.connect patched to accept address=")

# ========================================
# Normalny kod uruchamiający agentów
# ========================================
import os
import asyncio
import logging
from dotenv import load_dotenv

from agents.coordinator import CoordinatorAgent
from agents.provider_bakery import ProviderAgent
from agents.reporter import ReporterAgent
from agents.explorer_ai import ExplorerAgent

# --- Logowanie „po staremu” ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logging.getLogger("slixmpp").setLevel(logging.WARNING)        # ucisza "not-authorized"
logging.getLogger("aiosasl").setLevel(logging.ERROR)
logging.getLogger("slixmpp.stringprep").setLevel(logging.ERROR)


# --- Pomocnicze funkcje do pobierania JID/PWD z .env ---
def jid(name: str) -> str:
    return os.getenv(f"JID_{name.upper()}")


def pwd(name: str) -> str:
    return os.getenv(f"PWD_{name.upper()}")


async def main():
    load_dotenv()

    # --- Tworzenie agentów ---
    coord = CoordinatorAgent(jid("coordinator"), pwd("coordinator"))
    prov = ProviderAgent(jid("provider"), pwd("provider"))
    rep = ReporterAgent(jid("reporter"), pwd("reporter"))
    expl = ExplorerAgent(jid("explorer"), pwd("explorer"))

    # --- Konfiguracja XMPP host/port/TLS PRZED start() ---
    xmpp_host = os.getenv("XMPP_HOST", "85.215.177.75")
    xmpp_port = int(os.getenv("XMPP_PORT", "5222"))

    for a in (coord, prov, rep, expl):
        a.xmpp_host = xmpp_host
        a.xmpp_port = xmpp_port
        a.use_ssl = False              
        a.force_starttls = True
        a.disable_starttls = False
        a.verify_security = True    # DEV: nie sprawdzaj certu

    # --- Explorer wie, kto jest koordynatorem ---
    expl.config = {"coordinator": jid("coordinator")}

    # --- Start agentów ---
    await coord.start()
    await prov.start()
    await rep.start()
    await expl.start()

    print("✅ Agents up and running. Ctrl+C to stop.")
    # utrzymanie pętli
    await asyncio.Future()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n🛑 Stopped by user.")
